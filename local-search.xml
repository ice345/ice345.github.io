<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>computer_fix.md</title>
    <link href="/2024/04/28/computer-fix-md/"/>
    <url>/2024/04/28/computer-fix-md/</url>
    
    <content type="html"><![CDATA[<h1 id="电脑崩溃之学会系统重装">电脑崩溃之学会系统重装</h1><hr /><h2 id="前言">前言</h2><p>前几天，早上装完mac化的桌面后，发现确实ubuntu的内存不够用了，就打算对ubuntu扩容，参考的就是这个网页：<a href="https://blog.csdn.net/weixin_43356770/article/details/135393063" title="不知道是我的问题还是他教程不行">ubuntu扩容</a>。就这样，我的ubunt搞崩了，我想删了重装，结果我不小心格掉了windows的efi分区，导致Ubuntu的引导可以用，windows的就不行了。最终，搞不了Ubuntu，又进不了windows。</p><p>我不敢问群里的人，一些人又不会，最终我迷迷糊糊地重置了电脑，最终结果就是我的数据全没了。第一次重置分区又不是很会，卡在说c盘无法分，结果就是下了一个软件，导致有了垃圾，（好像金山毒霸这些），最终我选择重装。哦噢，后面问了群u，了解到了ventoy以及微pe这些好用的工具。最后就是用到这些重装了我的dell。分区其实如果没什么，也可以直接在磁盘管理这里分的，这里更直接，又没什么障碍。</p><p>处理sony那台电脑才是最奇葩的，不知道我爸是怎么重装的系统，导致我一怒之下将Ubuntu的efi分区给格了，导致现在用不了u盘启动也进不了系统。我搞了很久，不行就拆掉后盖，拆掉硬盘，发现好像dell识别不了。最终无奈放弃。不过也了解到了一些有用的东西，比如硬盘格式：机械硬盘（hdd），固态硬盘（ssd），混合的（hybrid hdd）。 固态硬盘分：m.2,sata。 m.2也分m，b，m&amp;b的。看缺口：左m有b</p><h2 id="学到的东西">学到的东西</h2><p>学会制作多系统盘，不像以前用rufus烧录一个盘。学会看一下bios的一些设置，学会利用u盘重装系统。以及学会用微pe处理一些各种各样的问题，比如： 1. <strong><em>重装系统时，磁盘格式问题</em></strong> 2. <strong><em>恢复系统引导</em></strong> 3. <strong><em>在微pe中分区</em></strong> 4. <strong><em>磁盘类型</em></strong></p><ul><li><a href="https://zhuanlan.zhihu.com/p/165345006">区分m.2磁盘</a></li><li><a href="https://www.bilibili.com/video/BV1vT4y1n7JX/?share_source=copy_web&amp;vd_source=7883c34abf56792377b6d59ed4b3146b" title="PE装系统保姆教程！U盘启动器制作！微pe重装系统！u盘重装系统！超简单！重装系统!超详细系统安装教程！系统如何安装？系统怎么装？">微pe</a></li><li><a href="https://www.bilibili.com/video/BV1oa4y1j7A2/?share_source=copy_web" title="【装机教程】全网最详细的MBR转GPT教程（把MBR转换成GPT的同时，保留硬盘上的数据）">微pe</a></li><li><a href="https://www.bilibili.com/video/BV1EZ4y18769/?share_source=copy_web&amp;vd_source=7883c34abf56792377b6d59ed4b3146b" title="【利用Ventoy打造最强大的启动U盘，把PE、Win To Go统统塞进去】">ventoy</a></li><li><a href="https://www.ventoy.net/cn/">ventoy官网</a></li><li><a href="https://www.bilibili.com/video/BV16k4y137aT/?share_source=copy_web&amp;vd_source=7883c34abf56792377b6d59ed4b3146b" title="【ventoy报错，在ventoy官网安全说明里有解决方法】">ventoy常见问题</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>markdown_latex.md</title>
    <link href="/2024/04/28/markdown-latex-md/"/>
    <url>/2024/04/28/markdown-latex-md/</url>
    
    <content type="html"><![CDATA[<h1 id="数学公式示例">数学公式示例</h1><p><strong><em>引导栏</em></strong> - <a href="#数学公式示例">数学公式示例</a> - <a href="#行内公式">行内公式</a> - <a href="#块级公式">块级公式</a> - <a href="#上下标">上下标</a> - <a href="#根号和分数">根号和分数</a> - <a href="#求和和积分">求和和积分</a> - <a href="#其他例子">其他例子</a></p><p>这是一个示例 Markdown 文档，演示了如何使用 LaTeX 编写数学公式。</p><h2 id="行内公式">行内公式</h2><p>行内公式可以使用单个美元符号 <code>$</code> 包裹起来，例如：<span class="math inline">\(E=mc^2\)</span>。</p><h2 id="块级公式">块级公式</h2><p>块级公式可以使用 <code>$$</code> 符号包裹起来，例如：</p><p><span class="math display">\[\frac{d}{dx} \left( \int_{a}^{x} f(u) \, du \right) = f(x)\]</span></p><p>这里是一个积分的例子，其中 <span class="math inline">\(f(u)\)</span> 是被积函数，<span class="math inline">\(a\)</span> 和 <span class="math inline">\(x\)</span> 是积分的下限和上限，<span class="math inline">\(\frac{d}{dx}\)</span> 是导数运算符。</p><h2 id="上下标">上下标</h2><p>你可以使用 <code>^</code> 和 <code>_</code> 符号来表示上标和下标，例如：</p><p><span class="math display">\[x^2 + y_1 = z_{\text{max}}\]</span></p><h2 id="根号和分数">根号和分数</h2><p>你可以使用 <code>\sqrt</code> 来表示根号，<code>\frac</code> 来表示分数，例如：</p><p><span class="math display">\[\sqrt{2} \cdot \frac{a}{b}\]</span></p><p>这是一个根号和分数的例子。</p><h2 id="求和和积分">求和和积分</h2><p>你可以使用 <code>\sum</code> 来表示求和，<code>\int</code> 来表示积分，例如：</p><p><span class="math display">\[\sum_{i=1}^{n} i^2 \quad \text{和} \quad \int_{0}^{\infty} e^{-x} \, dx\]</span></p><p>这是一个求和和积分的例子。</p><h2 id="其他例子">其他例子</h2><!--  --><p><span class="math display">\[\begin{align}f(x) &amp;= ax^2 + bx + c \\&amp;= a(x - x_1)(x - x_2) &amp;&amp; \text{（根据二次方程根的性质）} \\&amp;= a(x^2 - (x_1 + x_2)x + x_1x_2) &amp;&amp; \text{（展开乘法）} \\&amp;= ax^2 - a(x_1 + x_2)x + ax_1x_2 &amp;&amp; \text{（结合同类项）} \\&amp;= ax^2 - a(x_1 + x_2)x + ac &amp;&amp; \text{（由 $x_1x_2 = c$）}\end{align}\]</span></p>[ f(x) =<span class="math display">\[\begin{cases}ax^2 + bx + c, &amp; \text{if } x &gt; 0 \\0, &amp; \text{if } x = 0 \\-dx^2 + ex - f, &amp; \text{if } x &lt; 0\end{cases}\]</span><p>] <!--  --></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>docker_gitlab.md</title>
    <link href="/2024/04/28/docker-gitlab-md/"/>
    <url>/2024/04/28/docker-gitlab-md/</url>
    
    <content type="html"><![CDATA[<h2 id="注意这些全都要根据自己所用系统是什么ubuntu和debian这些可能都有些许出入架构问题等">注意这些全都要根据自己所用系统是什么，ubuntu和debian这些可能都有些许出入，架构问题等</h2><h1 id="更新安装依赖项">更新，安装依赖项</h1><p>sudo apt update sudo apt install apt-transport-https ca-certificates curl software-properties-common</p><h1 id="添加docker官方gpg密钥">添加docker官方gpg密钥</h1><p>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - ## 根据自己来设定，因为这个可能debian已经不用apt-key了，已经改用gpg这些了</p><h1 id="添加docker仓库">添加docker仓库</h1><p>sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"</p><h2 id="安装docker-ce">安装docker-ce</h2><p>sudo apt update sudo apt install docker-ce</p><h2 id="验证是否安装">验证是否安装</h2><p>sudo systemctl status docker</p><h2 id="创建gitlab目录来存放数据这些">创建gitlab目录来存放数据这些</h2><p>sudo mkdir -p /srv/gitlab/config /srv/gitlab/data /srv/gitlab/logs</p><h2 id="运行容器">运行容器</h2><p>sudo docker run --detach<br />--hostname ubuntu<br />--publish 443:443 --publish 80:80 --publish 22:22<br />--name gitlab<br />--restart always<br />--volume /srv/gitlab/config:/etc/gitlab<br />--volume /srv/gitlab/logs:/var/log/gitlab<br />--volume /srv/gitlab/data:/var/opt/gitlab<br />--env GITLAB_ROOT_PASSWORD=LJB626901<br />yrzr/gitlab-ce-arm64v8:latest</p><h3 id="最后一行就是要根据自己架构来获取镜像了arm架构和amd都不一样的your-hostname要改">最后一行就是要根据自己架构来获取镜像了，arm架构和amd都不一样的，Your hostname要改</h3><h3 id="有时要注意这些端口是否被占用">有时要注意这些端口是否被占用</h3><p>netstat -tuln | grep 80</p><h1 id="查询所有的镜像">查询所有的镜像</h1><p>docker ps -a # 此时会看到一个 gitlab-ce 的容器是没有启动的状态 # 删除 gitlab-ce 容器 docker rm gitlab-ce # 再次运行时，删除开放的 22 端口 docker run --detach<br />--restart always<br />--name gitlab<br />--privileged<br />--memory 4096M<br />--publish 80:80<br />--publish 443:443<br />--hostname ubuntu<br />--env GITLAB_OMNIBUS_CONFIG="<br />nginx['redirect_http_to_https'] = true; "<br />--volume /srv/gitlab/config:/etc/gitlab<br />--volume /srv/gitlab/logs:/var/log/gitlab<br />--volume /srv/gitlab/data:/var/opt/gitlab<br />--env GITLAB_ROOT_PASSWORD=LJB626901<br />yrzr/gitlab-ce-arm64v8:latest</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>docker</title>
    <link href="/2024/04/28/docker/"/>
    <url>/2024/04/28/docker/</url>
    
    <content type="html"><![CDATA[<h1 id="docker-learn">docker learn</h1><hr /><h1 id="table-of-contents">table of contents</h1><ul><li><a href="#docker-learn">docker learn</a></li><li><a href="#table-of-contents">table of contents</a><ul><li><a href="#虚拟机和docker">虚拟机和docker</a></li><li><a href="#docker和容器">docker和容器</a></li><li><a href="#docker讲解">docker讲解</a></li><li><a href="#docker_desktop介绍">docker_desktop介绍</a></li></ul></li></ul><hr /><h2 id="虚拟机和docker">虚拟机和docker</h2><ol type="1"><li><p>虚拟机和容器都是一种虚拟化技术，都是能实现一个操作系统上运行一些别的系统，运行一些安装包什么的</p></li><li><p><strong><em>虚拟机和docker的区别</em></strong>：</p></li></ol><ul><li><p>虚拟机是在主机操作系统上借助vwmare这些实现利用本地的硬件设施完成将本地服务器拆分为逻辑服务器，以此来实现可以运行多个系统。但是，这个就是会占用到很多本地硬件设施，会导致一些资源利用问题，比如：本来，我就只是想用一些软件包就行的，但非要安装os系统才行等。而且，虚拟机得启动缓慢，性能不是很好。</p></li><li><p>docker就是一个容器化平台，可以实现通过“鲸鱼”运载“集装箱”，以此我只是需要安装镜像就可以利用到我需要的容器即软件包等东西。占用的资源少，启动快，并且相比虚拟机可以安装很多个，只要看你想安装什么镜像，用到什么容器即可。</p></li><li><p><a href="https://github.com/ice345/picture_share/blob/master/docker_1.png" title="difference of docker and virtual machine">图片连接解释</a></p></li></ul><hr /><h2 id="docker和容器">docker和容器</h2><ol type="1"><li><p>容器也是一种虚拟化技术，从上面的描述和比较就可以知道。而docker就是一种使用到容器虚拟化技术的一个平台，所以docker就是容器化平台。</p></li><li><p>这个容器化平台就是有了很多功能和设置，使得我们更好利用到这个虚拟化技术，而且其实这个就是图形化界面，你直接用命令行安装docker也行的。</p></li></ol><hr /><h2 id="docker讲解">docker讲解</h2><ol type="1"><li><p>docker包含镜像，容器等概念。</p></li><li><p>镜像就是从dockerhub上下载的，你也可以自己编译吧，应该。这个dockerhub就是类似github的东西，这里有一些大佬弄出来的镜像。他相当于c++的类，这个镜像是自定义了一些东西。</p></li><li><p>容器就是我们使用docker命令弄了出来的，然后是通过镜像这个类弄出来的一个实例，他是一个独立的，轻量级的可执行软件包，包含：代码，环境，系统工具等</p></li><li><p><a href="https://github.com/ice345/picture_share/blob/master/docker_2.png" title="docker基本原理和概念">图片链接解释</a></p></li></ol><hr /><h2 id="docker_desktop介绍">docker_desktop介绍</h2><ol type="1"><li><p>docker desktop里的container是指容器，就是镜像的一个实例就是你自己的一个东西了</p></li><li><p>image就是镜像，就是你自己从docker hub上下载下来，用于你自己搞东西的一个模板</p></li><li><p>builds就是通过使用Docker Desktop中的Build功能，你可以方便地在本地开发环境中构建和测试Docker镜像，然后可以将这些镜像推送到Docker Hub或者其他Docker仓库中，以便在其他地方部署和使用。</p></li><li><p>volumes就是你本来用docker搞东西，这些文件什么的，就是一个类似虚拟化的东西，保存时间不久的，所以当你想保存的时候，你要将其放到本地主机的硬盘上，所以你就要用到volume了，将其弄成卷放到本地上。</p></li></ol><p><a href="https://www.youtube.com/watch?v=Ozb9mZg7MVM&amp;t=127s">很好的视频讲解</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/04/28/hello-world/"/>
    <url>/2024/04/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
