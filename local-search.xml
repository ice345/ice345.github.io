<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>docker_gitlab.md</title>
    <link href="/2024/04/28/docker-gitlab-md/"/>
    <url>/2024/04/28/docker-gitlab-md/</url>
    
    <content type="html"><![CDATA[<h2 id="注意这些全都要根据自己所用系统是什么，ubuntu和debian这些可能都有些许出入，架构问题等"><a href="#注意这些全都要根据自己所用系统是什么，ubuntu和debian这些可能都有些许出入，架构问题等" class="headerlink" title="注意这些全都要根据自己所用系统是什么，ubuntu和debian这些可能都有些许出入，架构问题等"></a>注意这些全都要根据自己所用系统是什么，ubuntu和debian这些可能都有些许出入，架构问题等</h2><h1 id="更新，安装依赖项"><a href="#更新，安装依赖项" class="headerlink" title="更新，安装依赖项"></a>更新，安装依赖项</h1><p>sudo apt update<br>sudo apt install apt-transport-https ca-certificates curl software-properties-common</p><h1 id="添加docker官方gpg密钥"><a href="#添加docker官方gpg密钥" class="headerlink" title="添加docker官方gpg密钥"></a>添加docker官方gpg密钥</h1><p>curl -fsSL <a href="https://download.docker.com/linux/ubuntu/gpg">https://download.docker.com/linux/ubuntu/gpg</a> | sudo apt-key add -</p><h2 id="根据自己来设定，因为这个可能debian已经不用apt-key了，已经改用gpg这些了"><a href="#根据自己来设定，因为这个可能debian已经不用apt-key了，已经改用gpg这些了" class="headerlink" title="根据自己来设定，因为这个可能debian已经不用apt-key了，已经改用gpg这些了"></a>根据自己来设定，因为这个可能debian已经不用apt-key了，已经改用gpg这些了</h2><h1 id="添加docker仓库"><a href="#添加docker仓库" class="headerlink" title="添加docker仓库"></a>添加docker仓库</h1><p>sudo add-apt-repository “deb [arch&#x3D;amd64] <a href="https://download.docker.com/linux/ubuntu">https://download.docker.com/linux/ubuntu</a> $(lsb_release -cs) stable”</p><h2 id="安装docker-ce"><a href="#安装docker-ce" class="headerlink" title="安装docker-ce"></a>安装docker-ce</h2><p>sudo apt update<br>sudo apt install docker-ce</p><h2 id="验证是否安装"><a href="#验证是否安装" class="headerlink" title="验证是否安装"></a>验证是否安装</h2><p>sudo systemctl status docker</p><h2 id="创建gitlab目录来存放数据这些"><a href="#创建gitlab目录来存放数据这些" class="headerlink" title="创建gitlab目录来存放数据这些"></a>创建gitlab目录来存放数据这些</h2><p>sudo mkdir -p &#x2F;srv&#x2F;gitlab&#x2F;config &#x2F;srv&#x2F;gitlab&#x2F;data &#x2F;srv&#x2F;gitlab&#x2F;logs</p><h2 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h2><p>sudo docker run –detach <br>  –hostname ubuntu <br>  –publish 443:443 –publish 80:80 –publish 22:22 <br>  –name gitlab <br>  –restart always <br>  –volume &#x2F;srv&#x2F;gitlab&#x2F;config:&#x2F;etc&#x2F;gitlab <br>  –volume &#x2F;srv&#x2F;gitlab&#x2F;logs:&#x2F;var&#x2F;log&#x2F;gitlab <br>  –volume &#x2F;srv&#x2F;gitlab&#x2F;data:&#x2F;var&#x2F;opt&#x2F;gitlab <br>  –env GITLAB_ROOT_PASSWORD&#x3D;LJB626901 <br>  yrzr&#x2F;gitlab-ce-arm64v8:latest</p><h3 id="最后一行就是要根据自己架构来获取镜像了，arm架构和amd都不一样的，Your-hostname要改"><a href="#最后一行就是要根据自己架构来获取镜像了，arm架构和amd都不一样的，Your-hostname要改" class="headerlink" title="最后一行就是要根据自己架构来获取镜像了，arm架构和amd都不一样的，Your hostname要改"></a>最后一行就是要根据自己架构来获取镜像了，arm架构和amd都不一样的，Your hostname要改</h3><h3 id="有时要注意这些端口是否被占用"><a href="#有时要注意这些端口是否被占用" class="headerlink" title="有时要注意这些端口是否被占用"></a>有时要注意这些端口是否被占用</h3><p>netstat -tuln | grep 80</p><h1 id="查询所有的镜像"><a href="#查询所有的镜像" class="headerlink" title="查询所有的镜像"></a>查询所有的镜像</h1><p>docker ps -a</p><h1 id="此时会看到一个-gitlab-ce-的容器是没有启动的状态"><a href="#此时会看到一个-gitlab-ce-的容器是没有启动的状态" class="headerlink" title="此时会看到一个 gitlab-ce 的容器是没有启动的状态"></a>此时会看到一个 gitlab-ce 的容器是没有启动的状态</h1><h1 id="删除-gitlab-ce-容器"><a href="#删除-gitlab-ce-容器" class="headerlink" title="删除 gitlab-ce 容器"></a>删除 gitlab-ce 容器</h1><p>docker rm gitlab-ce</p><h1 id="再次运行时，删除开放的-22-端口"><a href="#再次运行时，删除开放的-22-端口" class="headerlink" title="再次运行时，删除开放的 22 端口"></a>再次运行时，删除开放的 22 端口</h1><p>docker run  –detach <br>  –restart always <br>  –name gitlab <br>  –privileged <br>  –memory 4096M <br>  –publish 80:80 <br>  –publish 443:443 <br>  –hostname ubuntu <br>  –env GITLAB_OMNIBUS_CONFIG&#x3D;” <br>    nginx[‘redirect_http_to_https’] &#x3D; true; “<br>  –volume &#x2F;srv&#x2F;gitlab&#x2F;config:&#x2F;etc&#x2F;gitlab <br>  –volume &#x2F;srv&#x2F;gitlab&#x2F;logs:&#x2F;var&#x2F;log&#x2F;gitlab <br>  –volume &#x2F;srv&#x2F;gitlab&#x2F;data:&#x2F;var&#x2F;opt&#x2F;gitlab <br>  –env GITLAB_ROOT_PASSWORD&#x3D;LJB626901 <br>  yrzr&#x2F;gitlab-ce-arm64v8:latest</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>docker</title>
    <link href="/2024/04/28/docker/"/>
    <url>/2024/04/28/docker/</url>
    
    <content type="html"><![CDATA[<h1 id="docker-learn"><a href="#docker-learn" class="headerlink" title="docker learn"></a>docker learn</h1><hr><h1 id="table-of-contents"><a href="#table-of-contents" class="headerlink" title="table of contents"></a>table of contents</h1><ul><li><a href="#docker-learn">docker learn</a></li><li><a href="#table-of-contents">table of contents</a><ul><li><a href="#%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%92%8Cdocker">虚拟机和docker</a></li><li><a href="#docker%E5%92%8C%E5%AE%B9%E5%99%A8">docker和容器</a></li><li><a href="#docker%E8%AE%B2%E8%A7%A3">docker讲解</a></li><li><a href="#docker_desktop%E4%BB%8B%E7%BB%8D">docker_desktop介绍</a></li></ul></li></ul><hr><h2 id="虚拟机和docker"><a href="#虚拟机和docker" class="headerlink" title="虚拟机和docker"></a>虚拟机和docker</h2><ol><li><p>虚拟机和容器都是一种虚拟化技术，都是能实现一个操作系统上运行一些别的系统，运行一些安装包什么的</p></li><li><p><em><strong>虚拟机和docker的区别</strong></em>：</p></li></ol><ul><li><p>虚拟机是在主机操作系统上借助vwmare这些实现利用本地的硬件设施完成将本地服务器拆分为逻辑服务器，以此来实现可以运行多个系统。但是，这个就是会占用到很多本地硬件设施，会导致一些资源利用问题，比如：本来，我就只是想用一些软件包就行的，但非要安装os系统才行等。而且，虚拟机得启动缓慢，性能不是很好。</p></li><li><p>docker就是一个容器化平台，可以实现通过“鲸鱼”运载“集装箱”，以此我只是需要安装镜像就可以利用到我需要的容器即软件包等东西。占用的资源少，启动快，并且相比虚拟机可以安装很多个，只要看你想安装什么镜像，用到什么容器即可。</p></li><li><p><a href="https://github.com/ice345/picture_share/blob/master/docker_1.png" title="difference of docker and virtual machine">图片连接解释</a></p></li></ul><hr><h2 id="docker和容器"><a href="#docker和容器" class="headerlink" title="docker和容器"></a>docker和容器</h2><ol><li><p>容器也是一种虚拟化技术，从上面的描述和比较就可以知道。而docker就是一种使用到容器虚拟化技术的一个平台，所以docker就是容器化平台。</p></li><li><p>这个容器化平台就是有了很多功能和设置，使得我们更好利用到这个虚拟化技术，而且其实这个就是图形化界面，你直接用命令行安装docker也行的。</p></li></ol><hr><h2 id="docker讲解"><a href="#docker讲解" class="headerlink" title="docker讲解"></a>docker讲解</h2><ol><li><p>docker包含镜像，容器等概念。</p></li><li><p>镜像就是从dockerhub上下载的，你也可以自己编译吧，应该。这个dockerhub就是类似github的东西，这里有一些大佬弄出来的镜像。他相当于c++的类，这个镜像是自定义了一些东西。</p></li><li><p>容器就是我们使用docker命令弄了出来的，然后是通过镜像这个类弄出来的一个实例，他是一个独立的，轻量级的可执行软件包，包含：代码，环境，系统工具等</p></li><li><p><a href="https://github.com/ice345/picture_share/blob/master/docker_2.png" title="docker基本原理和概念">图片链接解释</a></p></li></ol><hr><h2 id="docker-desktop介绍"><a href="#docker-desktop介绍" class="headerlink" title="docker_desktop介绍"></a>docker_desktop介绍</h2><ol><li><p>docker desktop里的container是指容器，就是镜像的一个实例就是你自己的一个东西了</p></li><li><p>image就是镜像，就是你自己从docker hub上下载下来，用于你自己搞东西的一个模板</p></li><li><p>builds就是通过使用Docker Desktop中的Build功能，你可以方便地在本地开发环境中构建和测试Docker镜像，然后可以将这些镜像推送到Docker Hub或者其他Docker仓库中，以便在其他地方部署和使用。</p></li><li><p>volumes就是你本来用docker搞东西，这些文件什么的，就是一个类似虚拟化的东西，保存时间不久的，所以当你想保存的时候，你要将其放到本地主机的硬盘上，所以你就要用到volume了，将其弄成卷放到本地上。</p></li></ol><p><a href="https://www.youtube.com/watch?v=Ozb9mZg7MVM&t=127s">很好的视频讲解</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/04/28/hello-world/"/>
    <url>/2024/04/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
