<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>服务器搭建.md</title>
    <link href="/2024/04/28/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
    <url>/2024/04/28/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="服务器搭建"><a href="#服务器搭建" class="headerlink" title="服务器搭建"></a>服务器搭建</h1><hr><ul><li><a href="#%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA">服务器搭建</a><ul><li><a href="#%E5%AE%89%E8%A3%85docker">安装docker</a></li><li><a href="#docker%E5%AE%89%E8%A3%85%E5%A5%BD%E5%90%8E%E5%B0%B1%E6%98%AF%E6%8B%89%E5%8F%96gitlab%E9%95%9C%E5%83%8F%E4%BA%86">docker安装好后就是拉取gitlab镜像了</a></li><li><a href="#%E6%8B%89%E5%8F%96%E9%95%9C%E5%83%8F%E4%B9%9F%E8%A6%81%E7%9C%8B%E4%BD%A0%E6%9E%B6%E6%9E%84%E6%98%AF%E4%BB%80%E4%B9%88%E8%A6%81%E7%9C%8B%E6%98%AFamd64%E8%BF%98%E6%98%AFarm%E7%9A%84">拉取镜像也要看你架构是什么，要看是amd64还是arm的</a><ul><li><a href="#usrgitlabdata-%E7%9B%AE%E5%BD%95%E6%98%AF%E5%9C%A8%E4%BD%BF%E7%94%A8-docker-%E6%90%AD%E5%BB%BA-gitlab-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%B6%E7%94%A8%E4%BA%8E%E5%AD%98%E5%82%A8-gitlab-%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B8%BB%E8%A6%81%E7%9B%AE%E5%BD%95%E4%B9%8B%E4%B8%80%E8%AF%A5%E7%9B%AE%E5%BD%95%E5%8C%85%E5%90%AB%E4%BA%86-gitlab-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E6%98%AF-gitlab-%E5%9C%A8%E5%AE%B9%E5%99%A8%E5%86%85%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BD%8D%E7%BD%AE%E4%B8%8B%E9%9D%A2%E6%98%AF%E8%AF%A5%E7%9B%AE%E5%BD%95%E7%9A%84%E8%AF%A6%E7%BB%86%E8%AE%B2%E8%A7%A3">&#x2F;usr&#x2F;gitlab&#x2F;data 目录是在使用 Docker 搭建 GitLab 服务器时，用于存储 GitLab 数据的主要目录之一。该目录包含了 GitLab 服务器的各种数据，是 GitLab 在容器内持久化存储数据的位置。下面是该目录的详细讲解：</a></li><li><a href="#usrgitlabconfig-%E7%9B%AE%E5%BD%95%E6%98%AF%E5%9C%A8%E4%BD%BF%E7%94%A8-docker-%E6%90%AD%E5%BB%BA-gitlab-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%B6%E7%94%A8%E4%BA%8E%E5%AD%98%E5%82%A8-gitlab-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E7%9B%AE%E5%BD%95%E4%B9%8B%E4%B8%80%E8%BF%99%E4%B8%AA%E7%9B%AE%E5%BD%95%E5%8C%85%E5%90%AB%E4%BA%86-gitlab-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%94%A8%E4%BA%8E%E9%85%8D%E7%BD%AE-gitlab-%E7%9A%84%E5%90%84%E7%A7%8D%E8%A1%8C%E4%B8%BA%E5%92%8C%E7%89%B9%E6%80%A7%E4%B8%8B%E9%9D%A2%E6%98%AF%E8%AF%A5%E7%9B%AE%E5%BD%95%E7%9A%84%E8%AF%A6%E7%BB%86%E8%AE%B2%E8%A7%A3">&#x2F;usr&#x2F;gitlab&#x2F;config 目录是在使用 Docker 搭建 GitLab 服务器时，用于存储 GitLab 配置文件的目录之一。这个目录包含了 GitLab 服务器的配置文件，用于配置 GitLab 的各种行为和特性。下面是该目录的详细讲解：</a></li><li><a href="#usrgitlablogs-%E7%9B%AE%E5%BD%95%E6%98%AF%E5%9C%A8%E4%BD%BF%E7%94%A8-docker-%E6%90%AD%E5%BB%BA-gitlab-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%B6%E7%94%A8%E4%BA%8E%E5%AD%98%E5%82%A8-gitlab-%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E7%9A%84%E7%9B%AE%E5%BD%95%E4%B9%8B%E4%B8%80%E8%AF%A5%E7%9B%AE%E5%BD%95%E5%8C%85%E5%90%AB%E4%BA%86-gitlab-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%90%84%E7%A7%8D%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E8%AE%B0%E5%BD%95%E4%BA%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E8%BF%90%E8%A1%8C%E6%97%A5%E5%BF%97%E8%AE%BF%E9%97%AE%E6%97%A5%E5%BF%97%E7%AD%89%E4%BF%A1%E6%81%AF%E4%B8%8B%E9%9D%A2%E6%98%AF%E8%AF%A5%E7%9B%AE%E5%BD%95%E7%9A%84%E8%AF%A6%E7%BB%86%E8%AE%B2%E8%A7%A3">&#x2F;usr&#x2F;gitlab&#x2F;logs 目录是在使用 Docker 搭建 GitLab 服务器时，用于存储 GitLab 日志文件的目录之一。该目录包含了 GitLab 服务器的各种日志文件，记录了服务器的运行日志、访问日志等信息。下面是该目录的详细讲解：</a></li></ul></li><li><a href="#%E8%BF%90%E8%A1%8C%E5%AE%B9%E5%99%A8">运行容器</a><ul><li><a href="#%E5%BD%93%E4%BD%A0%E8%BF%90%E8%A1%8C%E5%AE%B9%E5%99%A8%E6%97%B6%E5%BF%98%E8%AE%B0%E8%AE%BE%E7%BD%AEroot%E5%AF%86%E7%A0%81%E5%8F%AF%E8%83%BD%E5%A4%A7%E6%A6%82%E7%8E%87%E6%9A%B4%E6%AF%99%E4%BB%80%E4%B9%88%E7%9A%84">当你运行容器时忘记设置root密码（可能大概率暴毙什么的）</a></li></ul></li><li><a href="#%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E4%BB%8E%E8%80%8C%E5%A4%9A%E4%BA%BA%E8%B7%A8%E5%B1%80%E5%9F%9F%E7%BD%91%E8%AE%BF%E9%97%AE">实现内网穿透从而多人跨局域网访问</a><ul><li><a href="#%E8%AF%A6%E7%BB%86%E8%AE%B2%E8%A7%A3">详细讲解</a></li></ul></li></ul></li></ul><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><ol><li>脚本安装：curl -fsSL <a href="https://get.docker.com/">https://get.docker.com</a> | bash -s docker –mirror Aliyun</li><li>手动安装:</li></ol><ul><li>添加docker源</li><li>添加密钥</li><li>设置密钥，这个要看版本，因为不同的有不同的添加方式</li><li>安装Docker Engine、Docker CLI和Docker Compose等工具，还有一些依赖项等</li><li>验证安装</li><li>设置开机自启动</li><li>有需要可以将docker添加到用户组</li></ul><hr><p><em><strong>具体实施</strong></em><br>1.<br>sudo apt-get update<br>sudo apt-get install <br>    apt-transport-https <br>    ca-certificates <br>    curl <br>    gnupg-agent <br>    software-properties-common</p><ol start="2"><li>curl -fsSL <a href="https://stackoverflow.com/questions/60137344/docker-how-to-solve-the-public-key-error-in-ubuntu-while-installing-docker">https://stackoverflow.com/questions/60137344/docker-how-to-solve-the-public-key-error-in-ubuntu-while-installing-docker</a> | sudo apt-key add -</li></ol><p>debian：curl -fsSL <a href="https://download.docker.com/linux/debian/gpg">https://download.docker.com/linux/debian/gpg</a> | sudo gpg –dearmor -o &#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;docker-archive-keyring.gpg</p><ol start="3"><li>echo “deb [arch&#x3D;amd64] <a href="https://hub.docker.com/">https://hub.docker.com/</a> stable main” | <br>  sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;docker.list</li></ol><p><em><strong>可以改为镜像源添加：</strong></em><br>echo “deb [arch&#x3D;amd64] <a href="https://mirrors.ustc.edu.cn/docker-ce/apt/">https://mirrors.ustc.edu.cn/docker-ce/apt/</a> stable main” | <br>    sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;docker.list</p><p><em><strong>配置镜像源：</strong></em><br>sudo mkdir -p &#x2F;etc&#x2F;docker<br>在&#x2F;etc&#x2F;docker&#x2F;里编写daemon.json文件来搞，下面的网址改为自己申请的加速源或者上网找<br>{<br>  “registry-mirrors”: [“<a href="https://ou96bdv0.mirror.aliyuncs.com"]">https://ou96bdv0.mirror.aliyuncs.com&quot;]</a><br>}<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker</p><ol start="4"><li><p>sudo apt-get update<br>sudo apt-get install docker-ce docker-ce-cli containerd.io</p></li><li><p>sudo systemctl enable docker<br><a href="https://github.com/ice345/documents/blob/master/DockerCheatSheet-ByGeekHour.pdf">一些常用docker命令</a></p></li><li><p>sudo usermod -aG docker $USER</p></li></ol><p>如果是ubuntu22.04这种新版本的就可以直接sudo apt install docker.io<br>因为他包含了依赖项这些，这命令也会安装其他所需要的工具</p><hr><h2 id="docker安装好后就是拉取gitlab镜像了"><a href="#docker安装好后就是拉取gitlab镜像了" class="headerlink" title="docker安装好后就是拉取gitlab镜像了"></a>docker安装好后就是拉取gitlab镜像了</h2><h2 id="拉取镜像也要看你架构是什么，要看是amd64还是arm的"><a href="#拉取镜像也要看你架构是什么，要看是amd64还是arm的" class="headerlink" title="拉取镜像也要看你架构是什么，要看是amd64还是arm的"></a>拉取镜像也要看你架构是什么，要看是amd64还是arm的</h2><ol><li>amd64的拉取 sudo docker pull gitlab&#x2F;gitlab-ce:latest </li><li>arm的拉取 sudo docker pull yrzr&#x2F;gitlab-ce-arm64v8:latest</li></ol><p>arm弄镜像有技巧，因为arm一般是树莓派所以你可以手机或者去官网下载好镜像再弄到sd卡上利用复制粘贴</p><p>有什么镜像符合也可以自己上网搜或者去docker hub上找</p><ol start="3"><li>接下来就是创建gitlab服务器存储的东西的目录，其实存在那里都可以，只要能访问就是了。一般存在sudo mkdir -p &#x2F;srv&#x2F;gitlab&#x2F;config &#x2F;srv&#x2F;gitlab&#x2F;data &#x2F;srv&#x2F;gitlab&#x2F;logs</li></ol><p>对各目录的一些解释：</p><h3 id="usr-gitlab-data-目录是在使用-Docker-搭建-GitLab-服务器时，用于存储-GitLab-数据的主要目录之一。该目录包含了-GitLab-服务器的各种数据，是-GitLab-在容器内持久化存储数据的位置。下面是该目录的详细讲解："><a href="#usr-gitlab-data-目录是在使用-Docker-搭建-GitLab-服务器时，用于存储-GitLab-数据的主要目录之一。该目录包含了-GitLab-服务器的各种数据，是-GitLab-在容器内持久化存储数据的位置。下面是该目录的详细讲解：" class="headerlink" title="&#x2F;usr&#x2F;gitlab&#x2F;data 目录是在使用 Docker 搭建 GitLab 服务器时，用于存储 GitLab 数据的主要目录之一。该目录包含了 GitLab 服务器的各种数据，是 GitLab 在容器内持久化存储数据的位置。下面是该目录的详细讲解："></a>&#x2F;usr&#x2F;gitlab&#x2F;data 目录是在使用 Docker 搭建 GitLab 服务器时，用于存储 GitLab 数据的主要目录之一。该目录包含了 GitLab 服务器的各种数据，是 GitLab 在容器内持久化存储数据的位置。下面是该目录的详细讲解：</h3><ol><li>Git 仓库数据：</li></ol><ul><li>在 &#x2F;usr&#x2F;gitlab&#x2F;data 目录下，GitLab 会创建一个名为 repositories 的子目录，用于存储所有的 Git 仓库数据。</li><li>每个 Git 仓库都会在 repositories 目录下创建一个相应的子目录，其中包含该仓库的所有文件、分支、提交记录等。</li><li>这些仓库数据包括用户创建的项目、合并请求、分支、提交记录等，是 GitLab 的核心数据之一。</li></ul><ol start="2"><li>上传文件和附件：</li></ol><ul><li>GitLab 允许用户上传各种类型的文件和附件到项目中，例如文档、图片、压缩文件等。</li><li>这些上传的文件和附件会存储在 &#x2F;usr&#x2F;gitlab&#x2F;data 目录下，以便于用户在需要时能够访问和下载。</li></ul><ol start="3"><li>CI&#x2F;CD 构建数据：</li></ol><ul><li>如果您在 GitLab 中使用了 CI&#x2F;CD 功能进行持续集成和持续部署，相关的构建数据也会存储在 &#x2F;usr&#x2F;gitlab&#x2F;data 目录下。</li><li>这些数据包括构建日志、构建产物、构建配置等，用于记录和管理项目的构建过程。</li></ul><ol start="4"><li>备份和恢复：</li></ol><ul><li>&#x2F;usr&#x2F;gitlab&#x2F;data 目录中的数据是 GitLab 服务器的核心数据，需要定期备份以防止数据丢失。</li><li>您可以通过备份 &#x2F;usr&#x2F;gitlab&#x2F;data 目录来保存 GitLab 的所有数据，以便在需要时进行恢复操作。</li></ul><p>总之，&#x2F;usr&#x2F;gitlab&#x2F;data 目录是 GitLab 服务器的核心数据存储位置，其中包含了项目的 Git 仓库数据、上传的文件和附件、CI&#x2F;CD 构建数据等。通过管理和维护这个目录，可以确保 GitLab 服务器的数据安全和持久化存储。</p><h3 id="usr-gitlab-config-目录是在使用-Docker-搭建-GitLab-服务器时，用于存储-GitLab-配置文件的目录之一。这个目录包含了-GitLab-服务器的配置文件，用于配置-GitLab-的各种行为和特性。下面是该目录的详细讲解："><a href="#usr-gitlab-config-目录是在使用-Docker-搭建-GitLab-服务器时，用于存储-GitLab-配置文件的目录之一。这个目录包含了-GitLab-服务器的配置文件，用于配置-GitLab-的各种行为和特性。下面是该目录的详细讲解：" class="headerlink" title="&#x2F;usr&#x2F;gitlab&#x2F;config 目录是在使用 Docker 搭建 GitLab 服务器时，用于存储 GitLab 配置文件的目录之一。这个目录包含了 GitLab 服务器的配置文件，用于配置 GitLab 的各种行为和特性。下面是该目录的详细讲解："></a>&#x2F;usr&#x2F;gitlab&#x2F;config 目录是在使用 Docker 搭建 GitLab 服务器时，用于存储 GitLab 配置文件的目录之一。这个目录包含了 GitLab 服务器的配置文件，用于配置 GitLab 的各种行为和特性。下面是该目录的详细讲解：</h3><ol><li>gitlab.rb 配置文件：</li></ol><ul><li>在 &#x2F;usr&#x2F;gitlab&#x2F;config 目录下，GitLab 会创建一个名为 gitlab.rb 的配置文件。</li><li>gitlab.rb 是 GitLab 的主要配置文件，其中包含了 GitLab 的所有配置选项和设置。</li><li>您可以通过编辑 gitlab.rb 文件来配置 GitLab 服务器的各种行为和特性，如域名、端口、邮箱设置、SSL 配置、存储路径等。</li></ul><ol start="2"><li>配置备份和恢复：</li></ol><ul><li>由于 gitlab.rb 文件包含了 GitLab 服务器的所有配置信息，因此备份和恢复这个文件是非常重要的。</li><li>在备份 GitLab 数据时，一并备份 gitlab.rb 文件可以确保在恢复时保留了所有的配置设置，从而保证 GitLab 的正常运行。</li></ul><p>3.配置管理：</p><ul><li>&#x2F;usr&#x2F;gitlab&#x2F;config 目录中的 gitlab.rb 文件是 GitLab 的核心配置文件，管理和维护这个文件是管理 GitLab 服务器的重要任务之一。</li><li>通过编辑 gitlab.rb 文件，您可以调整 GitLab 的各种配置选项以满足您的具体需求，如修改默认端口、配置邮件服务器、启用 SSL、设置备份策略等。</li></ul><p>4.配置版本控制：</p><ul><li>将 &#x2F;usr&#x2F;gitlab&#x2F;config 目录中的 gitlab.rb 文件纳入版本控制系统（如 Git）中进行管理是一种良好的实践。</li><li>这样做可以确保您对 GitLab 配置的修改能够被跟踪和记录，并且可以轻松地进行版本回滚和恢复。</li></ul><p>总之，&#x2F;usr&#x2F;gitlab&#x2F;config 目录中的 gitlab.rb 文件是 GitLab 服务器的主要配置文件，用于配置 GitLab 的各种行为和特性。通过管理和维护这个文件，可以确保 GitLab 服务器按照您的期望进行运行，并且可以灵活地调整和优化配置以满足您的需求。</p><h3 id="usr-gitlab-logs-目录是在使用-Docker-搭建-GitLab-服务器时，用于存储-GitLab-日志文件的目录之一。该目录包含了-GitLab-服务器的各种日志文件，记录了服务器的运行日志、访问日志等信息。下面是该目录的详细讲解："><a href="#usr-gitlab-logs-目录是在使用-Docker-搭建-GitLab-服务器时，用于存储-GitLab-日志文件的目录之一。该目录包含了-GitLab-服务器的各种日志文件，记录了服务器的运行日志、访问日志等信息。下面是该目录的详细讲解：" class="headerlink" title="&#x2F;usr&#x2F;gitlab&#x2F;logs 目录是在使用 Docker 搭建 GitLab 服务器时，用于存储 GitLab 日志文件的目录之一。该目录包含了 GitLab 服务器的各种日志文件，记录了服务器的运行日志、访问日志等信息。下面是该目录的详细讲解："></a>&#x2F;usr&#x2F;gitlab&#x2F;logs 目录是在使用 Docker 搭建 GitLab 服务器时，用于存储 GitLab 日志文件的目录之一。该目录包含了 GitLab 服务器的各种日志文件，记录了服务器的运行日志、访问日志等信息。下面是该目录的详细讲解：</h3><ol><li>日志文件：</li></ol><ul><li>在 &#x2F;usr&#x2F;gitlab&#x2F;logs 目录下，GitLab 会创建多个日志文件，用于记录不同类型的日志信息。<br>这些日志文件包括但不限于：</li><li>gitlab-rails&#x2F;production.log：记录 GitLab Rails 应用的运行日志，包括各种请求的处理情况、异常信息等。</li><li>gitlab-shell&#x2F;gitlab-shell.log：记录 GitLab Shell 的运行日志，包括 Git 操作的日志信息。</li><li>nginx&#x2F;access.log 和 nginx&#x2F;error.log：记录 Nginx Web 服务器的访问日志和错误日志，包括 HTTP 请求的信息和错误信息等。</li></ul><p>2.运行状态监控：</p><ul><li>通过查看 &#x2F;usr&#x2F;gitlab&#x2F;logs 目录中的日志文件，可以了解 GitLab 服务器的运行状态和异常情况。</li><li>例如，您可以查看 production.log 文件来了解 GitLab Rails 应用的处理情况，或者查看 nginx&#x2F;access.log 文件来分析用户的访问行为。</li></ul><ol start="3"><li>故障排查和问题定位：</li></ol><ul><li>日志文件是故障排查和问题定位的重要工具，通过查看日志文件可以帮助您找出服务器运行中的问题，并及时进行处理。</li><li>如果 GitLab 服务器出现异常或者运行缓慢，您可以通过查看日志文件来定位问题的原因，并采取相应的措施进行修复。</li></ul><ol start="4"><li>日志轮转和管理：</li></ol><ul><li>由于日志文件可能会不断增长，因此定期进行日志轮转和管理是很有必要的。</li><li>您可以配置日志轮转工具（如 logrotate）来定期对日志文件进行轮转、压缩和删除，以防止日志文件过大占用过多的磁盘空间。</li></ul><p>总之，&#x2F;usr&#x2F;gitlab&#x2F;logs 目录中的日志文件记录了 GitLab 服务器的运行日志、访问日志等重要信息，通过查看和分析这些日志文件，可以帮助您监控服务器的运行状态、故障排查和问题定位，从而保证 GitLab 服务器的正常运行。</p><hr><h2 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h2><p>sudo docker run –detach <br>  –hostname your-hostname <br>  –publish 443:443 –publish 80:80 –publish 22:22 <br>  –name gitlab <br>  –restart always <br>  –volume &#x2F;srv&#x2F;gitlab&#x2F;config:&#x2F;etc&#x2F;gitlab <br>  –volume &#x2F;srv&#x2F;gitlab&#x2F;logs:&#x2F;var&#x2F;log&#x2F;gitlab <br>  –volume &#x2F;srv&#x2F;gitlab&#x2F;data:&#x2F;var&#x2F;opt&#x2F;gitlab <br>  –env GITLAB_ROOT_PASSWORD&#x3D;LJB626901 <br>  gitlab&#x2F;gitlab-ce:latest </p><p><em><strong>注意更改上面的一些参数</strong></em>，最后一个就是看你自己的镜像了，也就是看架构来拉取镜像和运行镜像<br><strong>也要注意端口是否被占用等问题</strong>，可以用netstat -tuln来检查，还有这个可以用dockerfile来运行这个容器，从而实现自定义i容器参数等信息</p><h3 id="当你运行容器时忘记设置root密码（可能大概率暴毙什么的）"><a href="#当你运行容器时忘记设置root密码（可能大概率暴毙什么的）" class="headerlink" title="当你运行容器时忘记设置root密码（可能大概率暴毙什么的）"></a>当你运行容器时忘记设置root密码（可能大概率暴毙什么的）</h3><p>进入运行中的 GitLab 容器内部：<br>sudo docker exec -it gitlab bash<br>这个命令会在 GitLab 容器内部打开一个交互式的 bash shell。</p><p>使用 gitlab-rake 命令设置 root 管理员密码：<br>gitlab-rake “gitlab:password:reset[root]”<br>这个命令将提示你输入新的 root 管理员密码。</p><p>退出容器内部的 bash shell：<br>exit</p><p><em><strong>到这里，基本gitlab服务器就搭建完成了，就可以用ip来访问服务器了</strong></em></p><hr><h2 id="实现内网穿透从而多人跨局域网访问"><a href="#实现内网穿透从而多人跨局域网访问" class="headerlink" title="实现内网穿透从而多人跨局域网访问"></a>实现内网穿透从而多人跨局域网访问</h2><p><em><strong>主要都是自己看文档，我会弄链接出来</strong></em></p><ul><li>内网穿透工具</li></ul><ol><li><p><a href="https://localhost.run/">Localhost.run</a>: Localhost.run 是一个简单易用的工具，它可以帮助您将本地服务器暴露到公共互联网，无需进行端口映射或者配置路由器。</p></li><li><p><a href="https://pagekite.net/">Pagekite</a>: Pagekite 是一个开源的内网穿透工具，支持多种操作系统和多种协议，可以帮助您安全地将本地服务暴露到公网。</p></li><li><p><a href="https://ngrok.com/">Ngrok</a>: Ngrok 是一个功能强大的内网穿透工具，它可以创建安全的通道，将本地服务器映射到一个公共 URL，方便您与他人共享您的本地开发环境。</p></li><li><p><a href="https://nginx.org/">Nginx</a>: 虽然 Nginx 是一个高性能的反向代理服务器，但也可以用作内网穿透工具。通过适当的配置，您可以使用 Nginx 将本地服务暴露到公网。</p></li><li><p><a href="https://github.com/fatedier/frp">frp</a>: frp 是一个快速的反向代理工具，可以帮助您轻松地实现内网穿透，支持 TCP、UDP、HTTP 和 HTTPS 等协议。</p></li><li><p><a href="https://www.ddnsto.com/">ddnsto</a>: ddnsto 是一个简单易用的内网穿透工具，它可以帮助您快速地将本地服务器暴露到公网，无需复杂的配置。</p></li><li><p><a href="https://sereo.dev/">sereo</a>: sereo 是一个专注于内网穿透的服务提供商，它提供简单易用的工具和服务，帮助您轻松地实现内网穿透。</p></li></ol><ul><li>DNS解析服务</li></ul><ol><li><p><a href="https://www.cloudflare.com/">Cloudflare DNS</a>: Cloudflare DNS 是一个快速、安全且私密的 DNS 解析服务，它提供简单易用的界面和强大的安全功能。</p></li><li><p><a href="https://cloud.google.com/dns">Google Cloud DNS</a>: Google Cloud DNS 是 Google 提供的云端 DNS 解析服务，提供高性能和高可靠性的域名解析服务。</p></li><li><p><a href="https://www.namecheap.com/domains/freedns/">Namecheap FreeDNS</a>: Namecheap FreeDNS 是 Namecheap 提供的免费 DNS 解析服务，提供简单易用的界面和可靠的域名解析服务。</p></li></ol><ul><li>压力测试工具</li></ul><ol><li><a href="https://k6.io/">k6</a>: k6 是一个开源的负载测试工具，它可以帮助您测试网站、API 和微服务的性能和稳定性，支持多种场景和协议。</li></ol><ul><li><p>ngrok，pagekite 以及 ddnsto 是我了解到的配置比较简单的内网穿透工具了。</p></li><li><p>讲解一下ngrok和Nginx和区别：<em><strong>ngrok主要是将本地服务器暴露到公网，因为他运行后会自身产生一个公网ip或者url给你；而nginx主要是部署和管理本地的web应用程序或者是web服务器，可以用于反向代理、负载平衡、HTTP 缓存他不具备产生一个公网的ip或者url给你，如果你有则可以将其反向代理从而实现转到公网上</strong></em></p></li></ul><h4 id="详细讲解"><a href="#详细讲解" class="headerlink" title="详细讲解"></a>详细讲解</h4><ol><li>Ngrok</li></ol><ul><li><strong>功能</strong>：<ul><li>Ngrok 是一个内网穿透工具，允许您将本地计算机上的服务暴露到公共互联网，无论您的本地计算机处于什么样的网络环境中。</li><li>它提供安全的隧道，外部用户可以通过这个隧道访问您本地计算机上运行的服务，例如 Web 服务器、API 服务器或其他 TCP&#x2F;UDP 服务。</li><li>Ngrok 提供简单易用的命令行界面和管理界面，方便您管理和监控通过 Ngrok 暴露的服务。</li></ul></li></ul><ol start="2"><li>Nginx</li></ol><ul><li><strong>功能</strong>：<ul><li>Nginx 是一个高性能的 Web 服务器和反向代理服务器，用于部署和管理 Web 应用程序。</li><li>它可以作为静态资源服务器，为用户提供静态文件（例如 HTML、CSS、JavaScript、图片等）的访问。</li><li>Nginx 也可作为反向代理服务器，将客户端请求转发到后端的应用服务器，例如 Node.js、Python、Ruby 等，以提高应用程序的性能和可靠性。</li><li>Nginx 支持负载均衡、缓存、SSL&#x2F;TLS 加密、HTTP&#x2F;2 等功能，使其成为部署和扩展 Web 应用程序的理想选择。</li><li>Nginx 需要您拥有一个公网 IP 地址或 URL 才能将本地服务器暴露到公网上。这是因为 Nginx 需要将来自 Internet 的请求转发到您的本地服务器，而您的本地服务器必须具有可公开访问的 IP 地址或 URL。这就是从而实现中间代理的作用，就是作为反向代理服务器。</li></ul></li></ul><ol start="3"><li><strong>总结</strong>：</li></ol><ul><li>Ngrok 主要用于临时将本地服务暴露到公网，方便开发和测试；而 Nginx 则主要用于部署和管理生产环境中的 Web 应用程序。</li><li>Ngrok 是一个专门用于内网穿透的工具，适用于个人开发者或小团队；而 Nginx 则是一个通用的 Web 服务器和反向代理服务器，适用于企业级应用。</li><li>尽管 Ngrok 和 Nginx 在某种程度上都涉及到网络通信和流量转发，但它们的设计目标和使用场景是不同的。</li></ul><hr><ul><li>补充一个就是本地地址一般是127.0.0.1，这个主要就是设置本地各端口来用的</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>docker_gitlab.md</title>
    <link href="/2024/04/28/docker-gitlab/"/>
    <url>/2024/04/28/docker-gitlab/</url>
    
    <content type="html"><![CDATA[<h2 id="注意这些全都要根据自己所用系统是什么，ubuntu和debian这些可能都有些许出入，架构问题等"><a href="#注意这些全都要根据自己所用系统是什么，ubuntu和debian这些可能都有些许出入，架构问题等" class="headerlink" title="注意这些全都要根据自己所用系统是什么，ubuntu和debian这些可能都有些许出入，架构问题等"></a>注意这些全都要根据自己所用系统是什么，ubuntu和debian这些可能都有些许出入，架构问题等</h2><h1 id="更新，安装依赖项"><a href="#更新，安装依赖项" class="headerlink" title="更新，安装依赖项"></a>更新，安装依赖项</h1><p>sudo apt update<br>sudo apt install apt-transport-https ca-certificates curl software-properties-common</p><h1 id="添加docker官方gpg密钥"><a href="#添加docker官方gpg密钥" class="headerlink" title="添加docker官方gpg密钥"></a>添加docker官方gpg密钥</h1><p>curl -fsSL <a href="https://download.docker.com/linux/ubuntu/gpg">https://download.docker.com/linux/ubuntu/gpg</a> | sudo apt-key add -</p><h2 id="根据自己来设定，因为这个可能debian已经不用apt-key了，已经改用gpg这些了"><a href="#根据自己来设定，因为这个可能debian已经不用apt-key了，已经改用gpg这些了" class="headerlink" title="根据自己来设定，因为这个可能debian已经不用apt-key了，已经改用gpg这些了"></a>根据自己来设定，因为这个可能debian已经不用apt-key了，已经改用gpg这些了</h2><h1 id="添加docker仓库"><a href="#添加docker仓库" class="headerlink" title="添加docker仓库"></a>添加docker仓库</h1><p>sudo add-apt-repository “deb [arch&#x3D;amd64] <a href="https://download.docker.com/linux/ubuntu">https://download.docker.com/linux/ubuntu</a> $(lsb_release -cs) stable”</p><h2 id="安装docker-ce"><a href="#安装docker-ce" class="headerlink" title="安装docker-ce"></a>安装docker-ce</h2><p>sudo apt update<br>sudo apt install docker-ce</p><h2 id="验证是否安装"><a href="#验证是否安装" class="headerlink" title="验证是否安装"></a>验证是否安装</h2><p>sudo systemctl status docker</p><h2 id="创建gitlab目录来存放数据这些"><a href="#创建gitlab目录来存放数据这些" class="headerlink" title="创建gitlab目录来存放数据这些"></a>创建gitlab目录来存放数据这些</h2><p>sudo mkdir -p &#x2F;srv&#x2F;gitlab&#x2F;config &#x2F;srv&#x2F;gitlab&#x2F;data &#x2F;srv&#x2F;gitlab&#x2F;logs</p><h2 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h2><p>sudo docker run –detach <br>  –hostname ubuntu <br>  –publish 443:443 –publish 80:80 –publish 22:22 <br>  –name gitlab <br>  –restart always <br>  –volume &#x2F;srv&#x2F;gitlab&#x2F;config:&#x2F;etc&#x2F;gitlab <br>  –volume &#x2F;srv&#x2F;gitlab&#x2F;logs:&#x2F;var&#x2F;log&#x2F;gitlab <br>  –volume &#x2F;srv&#x2F;gitlab&#x2F;data:&#x2F;var&#x2F;opt&#x2F;gitlab <br>  –env GITLAB_ROOT_PASSWORD&#x3D;LJB626901 <br>  yrzr&#x2F;gitlab-ce-arm64v8:latest</p><h3 id="最后一行就是要根据自己架构来获取镜像了，arm架构和amd都不一样的，Your-hostname要改"><a href="#最后一行就是要根据自己架构来获取镜像了，arm架构和amd都不一样的，Your-hostname要改" class="headerlink" title="最后一行就是要根据自己架构来获取镜像了，arm架构和amd都不一样的，Your hostname要改"></a>最后一行就是要根据自己架构来获取镜像了，arm架构和amd都不一样的，Your hostname要改</h3><h3 id="有时要注意这些端口是否被占用"><a href="#有时要注意这些端口是否被占用" class="headerlink" title="有时要注意这些端口是否被占用"></a>有时要注意这些端口是否被占用</h3><p>netstat -tuln | grep 80</p><h1 id="查询所有的镜像"><a href="#查询所有的镜像" class="headerlink" title="查询所有的镜像"></a>查询所有的镜像</h1><p>docker ps -a</p><h1 id="此时会看到一个-gitlab-ce-的容器是没有启动的状态"><a href="#此时会看到一个-gitlab-ce-的容器是没有启动的状态" class="headerlink" title="此时会看到一个 gitlab-ce 的容器是没有启动的状态"></a>此时会看到一个 gitlab-ce 的容器是没有启动的状态</h1><h1 id="删除-gitlab-ce-容器"><a href="#删除-gitlab-ce-容器" class="headerlink" title="删除 gitlab-ce 容器"></a>删除 gitlab-ce 容器</h1><p>docker rm gitlab-ce</p><h1 id="再次运行时，删除开放的-22-端口"><a href="#再次运行时，删除开放的-22-端口" class="headerlink" title="再次运行时，删除开放的 22 端口"></a>再次运行时，删除开放的 22 端口</h1><p>docker run  –detach <br>  –restart always <br>  –name gitlab <br>  –privileged <br>  –memory 4096M <br>  –publish 80:80 <br>  –publish 443:443 <br>  –hostname ubuntu <br>  –env GITLAB_OMNIBUS_CONFIG&#x3D;” <br>    nginx[‘redirect_http_to_https’] &#x3D; true; “<br>  –volume &#x2F;srv&#x2F;gitlab&#x2F;config:&#x2F;etc&#x2F;gitlab <br>  –volume &#x2F;srv&#x2F;gitlab&#x2F;logs:&#x2F;var&#x2F;log&#x2F;gitlab <br>  –volume &#x2F;srv&#x2F;gitlab&#x2F;data:&#x2F;var&#x2F;opt&#x2F;gitlab <br>  –env GITLAB_ROOT_PASSWORD&#x3D;LJB626901 <br>  yrzr&#x2F;gitlab-ce-arm64v8:latest</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>git_use.md</title>
    <link href="/2024/04/28/git-use/"/>
    <url>/2024/04/28/git-use/</url>
    
    <content type="html"><![CDATA[<!-- git初认识感想 --><h1 id="git命令使用感想"><a href="#git命令使用感想" class="headerlink" title="git命令使用感想"></a>git命令使用感想</h1><hr><h2 id="git命令初始用"><a href="#git命令初始用" class="headerlink" title="git命令初始用"></a>git命令初始用</h2><!-- 这是已经建了仓库，可以使用git命令n推上去的情况，因为如果没有分支这些就要创建 --><ul><li>git init建一个.git仓库(相当于拍一张照，将本地文件都拍下来)，使得创建本地仓库，能够推送代码到远程</li><li>git add .这个是一点还是两点看路径，也可以添加想添加的代码文件,这样就将其推到一个暂存区了</li><li>git status就是查看推的状况了，可以查看有哪些文件推上去了，哪些失败了额</li><li>git commit -m “描述” 这个就是提交上去了</li><li>如果还没建分支就用git branch -M 分支名（一般是master或者是main）</li><li>git remote add origin url（一般最好用ssh密钥即建一个，后面可以不问密码）</li><li>git push origin 分支名</li><li>git log –oneline (简单地呈现日志，这样可以查看到相关提交的哈希，从而能实现一些恢复)</li><li>git checkout <commit_hash> – folder_to_delete（实现恢复文件的功能）</li></ul><h2 id="ssh密钥创建"><a href="#ssh密钥创建" class="headerlink" title="ssh密钥创建"></a>ssh密钥创建</h2><ul><li>先cd ~&#x2F;.ssh用ll看看有无id_rsa,id_rsa_pub，无就创建，用该命令：<br>*** ssh-keygen -t rsa -b 4096 -C “<a href="mailto:&#x6e;&#x6e;&#x69;&#52;&#x36;&#49;&#57;&#48;&#x34;&#x40;&#103;&#x6d;&#97;&#105;&#x6c;&#46;&#x63;&#111;&#x6d;">&#x6e;&#x6e;&#x69;&#52;&#x36;&#49;&#57;&#48;&#x34;&#x40;&#103;&#x6d;&#97;&#105;&#x6c;&#46;&#x63;&#111;&#x6d;</a>“ ***</li><li>创建好后就cat命令直接获取id_rsa_pub里的密钥或者vim复制也可</li><li>然后就进github网页设置那设置ssh密钥就可了</li></ul><h2 id="git-push报错"><a href="#git-push报错" class="headerlink" title="git push报错"></a>git push报错</h2><ul><li>这个学问就大了，要看报错，这是冲突性问题</li></ul><p>git push报错<a href="https://www.bilibili.com/video/BV1BA41117Qb/?share_source=copy_web&vd_source=7883c34abf56792377b6d59ed4b3146b" title="【push冲突与解决方法，git提交冲突的解决方法，冲突产生的原因，git-pull操作，2023年git最新实用教程】">git push冲突</a></p><!-- 我的想法 --><ul><li>因为折腾过很久，所以在最后提一下这个想法，这个是之前搞不定后，实现的一个操作：</li></ul><ol><li>先在github网页复制clone下来</li><li>这样操作之后就可以实现本地和远程的同步了，这样我本地版本就大于远程的了<!-- 只是这样无法再复杂的情况下很好实现需求，因为这样是一种妥协操作 --></li><li>之后就可以按add那样提交就是了</li></ol><h2 id="因为文件夹里包含-git文件导致github网页创建了个子系统模块"><a href="#因为文件夹里包含-git文件导致github网页创建了个子系统模块" class="headerlink" title="因为文件夹里包含.git文件导致github网页创建了个子系统模块"></a>因为文件夹里包含.git文件导致github网页创建了个子系统模块</h2><ol><li>先删除这个.git文件 rm -rf .git</li><li>然后用git rm –cached 文件名实现在暂存区删除这个文件夹，实现停止跟踪这个文件或文件夹，从而可以实现修复</li><li>使用git add命令重新添加到暂存区</li><li>最后用git commit命令来提交</li><li>最后git push<br><a href="https://blog.csdn.net/weixin_43145427/article/details/125248146" title="实现github网页修复问题">修复</a></li></ol><h2 id="git命令学习"><a href="#git命令学习" class="headerlink" title="git命令学习"></a><em><strong>git命令学习</strong></em></h2><p><a href="https://www.bilibili.com/video/BV1Gv421i7wW/?share_source=copy_web&vd_source=7883c34abf56792377b6d59ed4b3146b" title="【git 详解，10分钟学会】">git命令学习</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>常用git命令.md</title>
    <link href="/2024/04/28/%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4/"/>
    <url>/2024/04/28/%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="常用-Git-命令"><a href="#常用-Git-命令" class="headerlink" title="常用 Git 命令"></a>常用 Git 命令</h1><h2 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h2><ul><li>Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。 </li><li>Git是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。 </li><li>Git与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</li></ul><h2 id="Git与SVN的区别"><a href="#Git与SVN的区别" class="headerlink" title="Git与SVN的区别"></a>Git与SVN的区别</h2><p>Git不仅仅是个版本控制系统，它也是个内容管理系统(CMS),工作管理系统等。<br>如果你是一个具有使用SVN背景的人，你需要做一定的思想转换，来适应Git提供的一些概念和特征。<br>Git 与 SVN 区别点：</p><ol><li>Git是分布式的，SVN不是：这是Git和其它非分布式的版本控制系统，例如SVN，CVS等，最核心的区别。</li><li>Git把内容按元数据方式存储，而SVN是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn,.cvs等的文件夹里。</li><li>Git分支和SVN的分支不同：分支在SVN中一点不特别，就是版本库中的另外的一个目录。</li><li>Git没有一个全局的版本号，而SVN有：目前为止这是跟SVN相比GIT缺少的最大的一个特征。</li><li>Git的内容完整性要优于SVN：Git的内容存储使用的是SHA-1哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。</li></ol><p>经常使用 Git ，但是很多命令还是记不住。一般来说，日常使用只要记住下图7个命令就可以了。但要熟练掌握，恐怕要记住40~60个命令，所以整理了一份常用Git命令清单。</p><p><img src="https://raw.githubusercontent.com/JourWon/image/master/git/Git%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png" alt="Git工作流程"></p><ul><li>Workspace：工作区</li><li>Index &#x2F; Stage：暂存区</li><li>Repository：仓库区（或本地仓库）</li><li>Remote：远程仓库</li></ul><h2 id="配置用户名和邮箱"><a href="#配置用户名和邮箱" class="headerlink" title="配置用户名和邮箱"></a>配置用户名和邮箱</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git --version   <span class="hljs-comment"># 查看git的版本信息</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git config --global user.name   <span class="hljs-comment"># 获取当前登录的用户</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git config --global user.email  <span class="hljs-comment"># 获取当前登录用户的邮箱</span></span><br></code></pre></td></tr></table></figure><p>登录git</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">如果刚没有获取到用户配置，则只能拉取代码，不能修改  要是使用git，你要告诉git是谁在使用</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git config --global user.name <span class="hljs-string">&#x27;userName&#x27;</span>    <span class="hljs-comment"># 设置git账户，userName为你的git账号，</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git config --global user.email <span class="hljs-string">&#x27;email&#x27;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取Git配置信息，执行以下命令：</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git config –list</span><br></code></pre></td></tr></table></figure><h2 id="配置https和ssh推送时保存用户名和密码"><a href="#配置https和ssh推送时保存用户名和密码" class="headerlink" title="配置https和ssh推送时保存用户名和密码"></a>配置https和ssh推送时保存用户名和密码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">https提交保存用户名和密码</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git config --global credential.helper store</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">生成公钥私钥，将公钥配置到GitHub，ssh提交就可以免输入用户名密码</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">三次回车即可生成 ssh key</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">ssh-keygen -t rsa</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看已生成的公钥</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub</span><br></code></pre></td></tr></table></figure><h2 id="推送到远程仓库正确流程"><a href="#推送到远程仓库正确流程" class="headerlink" title="推送到远程仓库正确流程"></a>推送到远程仓库正确流程</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">1. git init # 初始化仓库<br>2. git add .(文件name) # 添加文件到本地仓库<br>3. git commit -m &quot;first commit&quot; # 添加文件描述信息<br>4. git remote add origin 远程仓库地址 # 链接远程仓库，创建主分支<br>5. git pull origin master --allow-unrelated-histories # 把本地仓库的变化连接到远程仓库主分支<br>6. git push -u origin master # 把本地仓库的文件推送到远程仓库<br></code></pre></td></tr></table></figure><h2 id="一、新建本地仓库"><a href="#一、新建本地仓库" class="headerlink" title="一、新建本地仓库"></a>一、新建本地仓库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建一个文件夹</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> GitRepositories    <span class="hljs-comment"># 创建文件夹GitRepositories</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> GitRepositories       <span class="hljs-comment"># 切换到GitRepositories目录下</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在当前目录新建一个Git代码库</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git init</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">新建一个目录，将其初始化为Git代码库</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git init [project-name]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载一个项目和它的整个代码历史</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> [url]</span><br></code></pre></td></tr></table></figure><h2 id="二、配置-全局和项目"><a href="#二、配置-全局和项目" class="headerlink" title="二、配置(全局和项目)"></a>二、配置(全局和项目)</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示当前的Git配置</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git config --list</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">编辑Git配置文件</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git config -e [--global]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置提交代码时的用户信息</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git config [--global] user.name <span class="hljs-string">&quot;[name]&quot;</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git config [--global] user.email <span class="hljs-string">&quot;[email address]&quot;</span></span><br></code></pre></td></tr></table></figure><h2 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加&#x2F;删除文件"></a>三、增加&#x2F;删除文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">添加指定文件到暂存区</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git add [file1][file2] ...</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加指定目录到暂存区，包括子目录</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git add [<span class="hljs-built_in">dir</span>]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加当前目录的所有文件到暂存区</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git add .</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加每个变化前，都会要求确认</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">对于同一个文件的多处变化，可以实现分次提交</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git add -p</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除工作区文件，并且将这次删除放入暂存区</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">rm</span> [file1] [file2] ...</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">停止追踪指定文件，但该文件会保留在工作区</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">rm</span> --cached [file]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">改名文件，并且将这个改名放入暂存区</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">mv</span> [file-original] [file-renamed]</span><br></code></pre></td></tr></table></figure><h2 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">提交暂存区到仓库区</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git commit -m [message]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">提交暂存区的指定文件到仓库区</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git commit [file1] [file2] ... -m [message]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git commit -a</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">提交时显示所有diff信息</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git commit -v</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用一次新的commit，替代上一次提交</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git commit --amend -m [message]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重做上一次commit，并包括指定文件的新变化</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git commit --amend [file1] [file2] ...</span><br></code></pre></td></tr></table></figure><h2 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">列出所有本地分支</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">列出所有远程分支</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch -r</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">列出所有本地分支和远程分支</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch -a</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">新建一个分支，但依然停留在当前分支</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch [branch-name]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">新建一个分支，并切换到该分支</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git checkout -b [branch]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">新建一个分支，指向指定commit</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch [branch] [commit]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">新建一个分支，与指定的远程分支建立追踪关系</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch --track [branch] [remote-branch]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">切换到指定分支，并更新工作区</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git checkout [branch-name]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">切换到上一个分支</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git checkout -</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch --set-upstream [branch] [remote-branch]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">合并指定分支到当前分支</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git merge [branch]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">选择一个commit，合并进当前分支</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git cherry-pick [commit]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除分支</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch -d [branch-name]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除远程分支</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git push origin --delete [branch-name]</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch -dr [remote/branch]</span><br></code></pre></td></tr></table></figure><h2 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">列出所有tag</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git tag</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">新建一个tag在当前commit</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git tag [tag]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">新建一个tag在指定commit</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git tag [tag] [commit]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除本地tag</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git tag -d [tag]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除远程tag</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git push origin :refs/tags/[tagName]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看tag信息</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git show [tag]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">提交指定tag</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git push [remote] [tag]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">提交所有tag</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git push [remote] --tags</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">新建一个分支，指向某个tag</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git checkout -b [branch] [tag]</span><br></code></pre></td></tr></table></figure><h2 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看目录</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">ls</span> -al或者$ ll</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看仓库状态，显示有变更的文件</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git status</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示当前分支的版本历史</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">log</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示commit历史，以及每次commit发生变更的文件</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">log</span> --<span class="hljs-built_in">stat</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">搜索提交历史，根据关键词</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">log</span> -S [keyword]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示某个commit之后的所有变动，每个commit占据一行</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">log</span> [tag] HEAD --pretty=format:%s</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示某个commit之后的所有变动，其<span class="hljs-string">&quot;提交说明&quot;</span>必须符合搜索条件</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">log</span> [tag] HEAD --grep feature</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示某个文件的版本历史，包括文件改名</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">log</span> --follow [file]</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git whatchanged [file]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示指定文件相关的每一次diff</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">log</span> -p [file]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示过去5次提交</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">log</span> -5 --pretty --oneline</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示所有提交过的用户，按提交次数排序</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git shortlog -sn</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示指定文件是什么人在什么时间修改过</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git blame [file]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示暂存区和工作区的差异</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git diff</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示暂存区和上一个commit的差异</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git diff --cached [file]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示工作区与当前分支最新commit之间的差异</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git diff HEAD</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示两次提交之间的差异</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git diff [first-branch]...[second-branch]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示今天你写了多少行代码</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git diff --shortstat <span class="hljs-string">&quot;@&#123;0 day ago&#125;&quot;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示某次提交的元数据和内容变化</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git show [commit]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示某次提交发生变化的文件</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git show --name-only [commit]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示某次提交时，某个文件的内容</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git show [commit]:[filename]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示当前分支的最近几次提交</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git reflog</span><br></code></pre></td></tr></table></figure><h2 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">下载远程仓库的所有变动</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git fetch [remote]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示所有远程仓库</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git remote -v</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示某个远程仓库的信息</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git remote show [remote]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">增加一个新的远程仓库，并命名</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git remote add [shortname] [url]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">取回远程仓库的变化，并与本地分支合并</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git pull [remote] [branch]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">上传本地指定分支到远程仓库</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git push [remote] [branch]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">强行推送当前分支到远程仓库，即使有冲突</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git push [remote] --force</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">推送所有分支到远程仓库</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git push [remote] --all</span><br></code></pre></td></tr></table></figure><h2 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">恢复暂存区的指定文件到工作区</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git checkout [file]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">恢复某个commit的指定文件到暂存区和工作区</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git checkout [commit] [file]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">恢复暂存区的所有文件到工作区</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git checkout .</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git reset [file]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重置暂存区与工作区，与上一次commit保持一致</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git reset --hard</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git reset [commit]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git reset --hard [commit]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git reset --keep [commit]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">新建一个commit，用来撤销指定commit</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">后者的所有变化都将被前者抵消，并且应用到当前分支</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git revert [commit]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">暂时将未提交的变化移除，稍后再移入</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git stash</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git stash pop</span><br></code></pre></td></tr></table></figure><h2 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">从当前目录的所有文件中查找文本内容：</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git grep <span class="hljs-string">&quot;Hello&quot;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在某一版本中搜索文本：</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git grep <span class="hljs-string">&quot;Hello&quot;</span> v2.5</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">生成一个可供发布的压缩包</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git archive</span><br></code></pre></td></tr></table></figure><h2 id="附：Git常用命令速查表"><a href="#附：Git常用命令速查表" class="headerlink" title="附：Git常用命令速查表"></a>附：Git常用命令速查表</h2><p><img src="https://raw.githubusercontent.com/JourWon/image/master/git/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5%E8%A1%A8.jpg" alt="Git常用命令速查表"></p><h2 id="附：Git指令速查表"><a href="#附：Git指令速查表" class="headerlink" title="附：Git指令速查表"></a>附：Git指令速查表</h2><p><img src="https://raw.githubusercontent.com/JourWon/image/master/git/Git%E6%8C%87%E4%BB%A4%E9%80%9F%E6%9F%A5%E8%A1%A81.jpg" alt="Git指令速查表1"><br><img src="https://raw.githubusercontent.com/JourWon/image/master/git/Git%E6%8C%87%E4%BB%A4%E9%80%9F%E6%9F%A5%E8%A1%A82.jpg" alt="Git指令速查表2"></p><h2 id="附：资料链接"><a href="#附：资料链接" class="headerlink" title="附：资料链接"></a>附：资料链接</h2><p><a href="https://blog.csdn.net/tomatozaitian/article/details/73515849">Git 常用命令总结</a><br><a href="https://blog.csdn.net/afei__/article/details/51476529">Git常用命令，很全很详细讲解的也不错</a><br><a href="https://blog.csdn.net/tgbus18990140382/article/details/52886786">Git详细使用教程</a><br><a href="https://blog.csdn.net/youzhouliu/article/details/78952453">Git使用详细教程</a><br><a href="http://www.cnblogs.com/smuxiaolei/p/7484678.html">Git 安装和使用教程</a><br><a href="https://www.w3cschool.cn/git/git-tutorial.html">Git 教程</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>docker</title>
    <link href="/2024/04/28/docker/"/>
    <url>/2024/04/28/docker/</url>
    
    <content type="html"><![CDATA[<h1 id="docker-learn"><a href="#docker-learn" class="headerlink" title="docker learn"></a>docker learn</h1><hr><h1 id="table-of-contents"><a href="#table-of-contents" class="headerlink" title="table of contents"></a>table of contents</h1><ul><li><a href="#docker-learn">docker learn</a></li><li><a href="#table-of-contents">table of contents</a><ul><li><a href="#%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%92%8Cdocker">虚拟机和docker</a></li><li><a href="#docker%E5%92%8C%E5%AE%B9%E5%99%A8">docker和容器</a></li><li><a href="#docker%E8%AE%B2%E8%A7%A3">docker讲解</a></li><li><a href="#docker_desktop%E4%BB%8B%E7%BB%8D">docker_desktop介绍</a></li></ul></li></ul><hr><h2 id="虚拟机和docker"><a href="#虚拟机和docker" class="headerlink" title="虚拟机和docker"></a>虚拟机和docker</h2><ol><li><p>虚拟机和容器都是一种虚拟化技术，都是能实现一个操作系统上运行一些别的系统，运行一些安装包什么的</p></li><li><p><em><strong>虚拟机和docker的区别</strong></em>：</p></li></ol><ul><li><p>虚拟机是在主机操作系统上借助vwmare这些实现利用本地的硬件设施完成将本地服务器拆分为逻辑服务器，以此来实现可以运行多个系统。但是，这个就是会占用到很多本地硬件设施，会导致一些资源利用问题，比如：本来，我就只是想用一些软件包就行的，但非要安装os系统才行等。而且，虚拟机得启动缓慢，性能不是很好。</p></li><li><p>docker就是一个容器化平台，可以实现通过“鲸鱼”运载“集装箱”，以此我只是需要安装镜像就可以利用到我需要的容器即软件包等东西。占用的资源少，启动快，并且相比虚拟机可以安装很多个，只要看你想安装什么镜像，用到什么容器即可。</p></li><li><p><a href="https://github.com/ice345/picture_share/blob/master/docker_1.png" title="difference of docker and virtual machine">图片连接解释</a></p></li></ul><hr><h2 id="docker和容器"><a href="#docker和容器" class="headerlink" title="docker和容器"></a>docker和容器</h2><ol><li><p>容器也是一种虚拟化技术，从上面的描述和比较就可以知道。而docker就是一种使用到容器虚拟化技术的一个平台，所以docker就是容器化平台。</p></li><li><p>这个容器化平台就是有了很多功能和设置，使得我们更好利用到这个虚拟化技术，而且其实这个就是图形化界面，你直接用命令行安装docker也行的。</p></li></ol><hr><h2 id="docker讲解"><a href="#docker讲解" class="headerlink" title="docker讲解"></a>docker讲解</h2><ol><li><p>docker包含镜像，容器等概念。</p></li><li><p>镜像就是从dockerhub上下载的，你也可以自己编译吧，应该。这个dockerhub就是类似github的东西，这里有一些大佬弄出来的镜像。他相当于c++的类，这个镜像是自定义了一些东西。</p></li><li><p>容器就是我们使用docker命令弄了出来的，然后是通过镜像这个类弄出来的一个实例，他是一个独立的，轻量级的可执行软件包，包含：代码，环境，系统工具等</p></li><li><p><a href="https://github.com/ice345/picture_share/blob/master/docker_2.png" title="docker基本原理和概念">图片链接解释</a></p></li></ol><hr><h2 id="docker-desktop介绍"><a href="#docker-desktop介绍" class="headerlink" title="docker_desktop介绍"></a>docker_desktop介绍</h2><ol><li><p>docker desktop里的container是指容器，就是镜像的一个实例就是你自己的一个东西了</p></li><li><p>image就是镜像，就是你自己从docker hub上下载下来，用于你自己搞东西的一个模板</p></li><li><p>builds就是通过使用Docker Desktop中的Build功能，你可以方便地在本地开发环境中构建和测试Docker镜像，然后可以将这些镜像推送到Docker Hub或者其他Docker仓库中，以便在其他地方部署和使用。</p></li><li><p>volumes就是你本来用docker搞东西，这些文件什么的，就是一个类似虚拟化的东西，保存时间不久的，所以当你想保存的时候，你要将其放到本地主机的硬盘上，所以你就要用到volume了，将其弄成卷放到本地上。</p></li></ol><p><a href="https://www.youtube.com/watch?v=Ozb9mZg7MVM&t=127s">很好的视频讲解</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/04/28/hello-world/"/>
    <url>/2024/04/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
